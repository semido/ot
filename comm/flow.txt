### implement RGA

client data
  server revision
  sentOp
  state
client's loop
  make op; send; store in sentOp
  receive n ops from server
  if ACCEPT:
    drop op from 'ops to confirm'
  else:
    transform 'ops to send'
    transform ext op;
    apply ext op to state
  send; move sent to 'ops to confirm'

server data
  received // ops
  applied // ops
  revision
  state
server's loop
  recieve op -> put to s.received
  for op in s.received:
    transform op considering s.rev & op.rev
    op.rev = s.rev
    apply op to s.state
    move op to s.applied
    ++s.rev; op.revision=revision
    send ACCEPT + s.rev to 'op.sender'
    send op to all except 'op.sender'

сервер должен подтвердить применение операции, чтобы ее больше не применять на клиенте
сервер должен послать операцию другим, мы вебираем слать по запросу

каждый клиент должен послать новые операции и принять операции с сервера

client.sendOps
посылаемые операции отмечаются ревизией на клиенте client.rev
это значит клиентское состояние включает операции соотв ревизии
на сервере посылаемые операции нужно трансформировать поверх операций начиная от client.rev+1
на клиенте посылаемые операции нужно оставить в буфере до приема от сервера

// применить к клиентскому состоянию принятые операции с сервера,
// их нужно трансформировать на все локальные операции
// локальные операции можно удалить только когда их применит сервер
// клиент узнает об этом по присланной обратно операции
client::getUpdate()
{
  update = s.getUpdate(client.rev) // server sends all applied ops later than client.rev
  for op in update:
    if op.clientId = clientId:
      if not sentOps.erase(op):
       throw "local operation lost" // forgot to put op in sentOps or already confirmed from server
    else:
      state.apply(op.transform(sentOps)) // consider sentOps in op, then apply
  client.rev = update.rev
}

создали операцию % op.id = localOpId
положили в буфер
передали буфер серверу % op.clientId
сервер залил в общий буфер чтобы отсортировать и трансформировать % op.rev
